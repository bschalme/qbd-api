plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.micronaut.application" version "1.2.0"
    id "com.pasam.gradle.buildinfo" version "0.1.3"
    id "org.owasp.dependencycheck" version "6.1.2"
    id "jacoco"
}

group "ca.airspeed"
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("ca.airspeed.*")
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor"
    annotationProcessor "io.micronaut.openapi:micronaut-openapi"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-http"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa"
    implementation "io.micronaut:micronaut-discovery-client"
    implementation "io.micronaut.aws:micronaut-aws-common"
    implementation "com.amazonaws:aws-java-sdk-ssm:1.11.922"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut.security:micronaut-security-annotations"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "org.apache.commons:commons-lang3:3.11"
//    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.1.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.14.0"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.mockito:mockito-junit-jupiter:3.6.0"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "com.tngtech.archunit:archunit-junit5:0.17.0"
//    testImplementation "io.micronaut:micronaut-function-client"
//    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    runtimeOnly 'io.micronaut.sql:micronaut-jdbc-hikari'
    runtimeOnly "io.micronaut.data:micronaut-data-runtime"
    testRuntimeOnly "com.h2database:h2"
    runtimeOnly("mysql:mysql-connector-java:5.1.49")
//     runtimeOnly "com.h2database:h2"
    implementation "io.micronaut:micronaut-http-server-netty"
}

test.classpath += configurations.developmentOnly
// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/Application.*')
        })
    }
}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

mainClassName = "ca.airspeed.qbdapi.Application"

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs.add('-parameters')
	options.fork = true
	options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=redoc.enabled=true,rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}
