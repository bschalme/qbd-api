plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
    id "com.pasam.gradle.buildinfo" version "0.1.3"
//     id "com.gorylenko.gradle-git-properties" version "2.2.2"
}
aws {
    profileName = "default"
    region = "ca-central-1"
}

group "ca.airspeed"
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-http"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
	implementation("io.micronaut.aws:micronaut-function-aws-api-proxy") {
		exclude group: "org.apache.httpcomponents"
		exclude group: "org.slf4j"
	}
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa:$micronautDataVersion"
    implementation "io.micronaut:micronaut-discovery-client"
    implementation "io.micronaut.aws:micronaut-aws-common"
    implementation "com.amazonaws:aws-java-sdk-ssm:1.11.719"
    implementation "io.micronaut:micronaut-management"
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.1.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.13.0"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.mockito:mockito-junit-jupiter:2.28.2"
//    testImplementation "io.micronaut:micronaut-function-client"
//    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    runtime 'io.micronaut.sql:micronaut-jdbc-hikari'
    runtime "io.micronaut.data:micronaut-data-runtime:$micronautDataVersion"
//     testRuntimeOnly "com.h2database:h2"
//     runtime("mysql:mysql-connector-java:5.1.48")
    runtime "com.h2database:h2"
    implementation "io.micronaut:micronaut-http-server-netty"
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

mainClassName = "ca.airspeed.qbdapi.Application"

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs.add('-parameters')
}
task exploded(type: Copy) {
	from sourceSets.main.output
	into "build/exploded"
	
	
	into('lib') {
		from configurations.compileClasspath
		from configurations.runtimeClasspath
	}
}

shadowJar.dependsOn exploded
